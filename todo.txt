0. more unit tests
   - verify BOOST_CHECK_SMALL vs BOOST_CHECK_CLOSE
   - improve the tests for core data structures (such as table_factor)
1. move to Armadillo's sparse matrices 
2. move to C++11
3. drop dependence on Boost for the main template library (keep it for Python bindings and tests)
4. remove much of the custom code like forward_range, range-based algorithms, operator std::string
5. move domain, assignment, etc. to separate data structures
6. variable values, not pointers
7. general code cleanup
   - simplify design wherever possible
   - parallel-friendly
   - performance (speed + memory) - 
   - facebook formatting guidelines wrt the newline after ( +
   - trailing underscore for member vars
   - allow edge creation outside of the graph
   - rename random_table_factor_functor to table_factor_generator and
     change the function signatures from generate_xxx to operator(),
     so that the generator can be used directly e.g in loopy bp 
     without adapters
   - get rid of the SWIG nonsense
   - make sure triangulation does not construct properties
   - get rid of Factor::collapse_type
   - clean up record or merge it with assignment
   - replace template arguments for optimization objective/gradient
     with std::function
   - fix table_factor::operator=(double)
   - rename shafer_shenoy and hugin to something more memorable
     and split junction tree inference to two files
   - possibly merge the class with markov_network
   - clean up the factor_graph template
   - decomposable - move the extra normalization out of the impl namespace
   - test if we can eliminate the marginal with pre-allocated output
   - clean up the concepts especially factors
   - remove extra typedefs from table_factor and other factor classes
   - implement d-separation in Markov network and Bayesian network classes
   - get rid of member functions in decomposable that create functors
   - remove the second argument in decomposable_fragment
   - factor traits

Python:
- change many asserts to exceptions
